AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: A Telegram bot using AWS Lambda and DynamoDB

Parameters:
  TelegramBotToken:
    Type: String
    Description: "The token for your Telegram bot"

  SecretToken:
    Type: String
    Description: "Secret token for securing the webhook endpoint"

Resources:
  AuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: authorizer.lambda_handler
      Runtime: python3.12
      CodeUri: ./authorizer
      MemorySize: 128
      Timeout: 10
      Environment:
        Variables:
          SECRET_TOKEN: !Ref SecretToken

  TelegramBotApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      DefinitionBody:
        openapi: 3.0.1
        info:
          title: Telegram Bot API
          version: 1.0
        paths:
          /telegram:
            post:
              parameters:
                - name: X-Telegram-Bot-Api-Secret-Token
                  in: header
                  required: true
                  schema:
                    type: string
              responses:
                '200':
                  description: Success
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: POST
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TelegramBotFunction.Arn}/invocations"
                credentials: !GetAtt ApiGatewayExecutionRole.Arn

  TelegramBotFunction:
    Type: AWS::Serverless::Function
    Properties:
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref BottlesTable
        - DynamoDBCrudPolicy:
            TableName: !Ref AdminsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref GifsTable
      Handler: app.lambda_handler
      Runtime: python3.12
      CodeUri: .
      MemorySize: 128
      Timeout: 10
      Environment:
        Variables:
          TELEGRAM_BOT_TOKEN: !Ref TelegramBotToken
          DYNAMODB_BOTTLES_TABLE: !Ref BottlesTable
          DYNAMODB_ADMINS_TABLE: !Ref AdminsTable
          DYNAMODB_GIFS_TABLE: !Ref GifsTable
      Events:
        TelegramApi:
          Type: Api
          Properties:
            Path: /telegram
            Method: POST
            RestApiId: !Ref TelegramBotApi
            Auth:
              Authorizer: !Ref AuthorizerFunction

  BottlesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Bottles
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  AdminsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Admins
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  GifsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Gifs
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  ApiGatewayExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ApiGatewayInvokeLambda
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource: !GetAtt TelegramBotFunction.Arn

Outputs:
  TelegramBotApi:
    Description: "Telegram bot API Gateway endpoint"
    Value: !Sub "https://${TelegramBotApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/telegram"
